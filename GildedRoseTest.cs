using NUnit.Framework;
using System.Collections.Generic;

namespace csharp
{
    [TestFixture]
    public class GildedRoseTest
    {
        [Test]
        [TestCase("Aged Brie", 0, -1, 2, -2)]
        [TestCase("Aged Brie", 1, -1, 3, -2)]
        [TestCase("Aged Brie", 49, -1, 50, -2)]
        [TestCase("Aged Brie", 50, -1, 50, -2)]
        [TestCase("Aged Brie", 0, 0, 2, -1)]
        [TestCase("Aged Brie", 1, 0, 3, -1)]
        [TestCase("Aged Brie", 49, 0, 50, -1)]
        [TestCase("Aged Brie", 50, 0, 50, -1)]
        [TestCase("Aged Brie", 0, 5, 1, 4)]
        [TestCase("Aged Brie", 1, 5, 2, 4)]
        [TestCase("Aged Brie", 49, 5, 50, 4)]
        [TestCase("Aged Brie", 50, 5, 50, 4)]
        [TestCase("Aged Brie", 0, 6, 1, 5)]
        [TestCase("Aged Brie", 1, 6, 2, 5)]
        [TestCase("Aged Brie", 49, 6, 50, 5)]
        [TestCase("Aged Brie", 50, 6, 50, 5)]
        [TestCase("Aged Brie", 0, 10, 1, 9)]
        [TestCase("Aged Brie", 1, 10, 2, 9)]
        [TestCase("Aged Brie", 49, 10, 50, 9)]
        [TestCase("Aged Brie", 50, 10, 50, 9)]
        [TestCase("Aged Brie", 0, 11, 1, 10)]
        [TestCase("Aged Brie", 1, 11, 2, 10)]
        [TestCase("Aged Brie", 49, 11, 50, 10)]
        [TestCase("Aged Brie", 50, 11, 50, 10)]
        [TestCase("Aged Brie", 0, 49, 1, 48)]
        [TestCase("Aged Brie", 1, 49, 2, 48)]
        [TestCase("Aged Brie", 49, 49, 50, 48)]
        [TestCase("Aged Brie", 50, 49, 50, 48)]
        [TestCase("Aged Brie", 0, 50, 1, 49)]
        [TestCase("Aged Brie", 1, 50, 2, 49)]
        [TestCase("Aged Brie", 49, 50, 50, 49)]
        [TestCase("Aged Brie", 50, 50, 50, 49)]

        [TestCase("Backstage passes to a TAFKAL80ETC concert", 0, -1, 0, -2)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 1, -1, 0, -2)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 49, -1, 0, -2)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 50, -1, 0, -2)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 0, 0, 0, -1)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 1, 0, 0, -1)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 49, 0, 0, -1)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 50, 0, 0, -1)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 0, 5, 3, 4)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 1, 5, 4, 4)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 49, 5, 50, 4)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 50, 5, 50, 4)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 0, 6, 2, 5)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 1, 6, 3, 5)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 49, 6, 50, 5)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 50, 6, 50, 5)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 0, 10, 2, 9)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 1, 10, 3, 9)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 49, 10, 50, 9)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 50, 10, 50, 9)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 0, 11, 1, 10)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 1, 11, 2, 10)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 49, 11, 50, 10)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 50, 11, 50, 10)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 0, 49, 1, 48)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 1, 49, 2, 48)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 49, 49, 50, 48)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 50, 49, 50, 48)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 0, 50, 1, 49)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 1, 50, 2, 49)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 49, 50, 50, 49)]
        [TestCase("Backstage passes to a TAFKAL80ETC concert", 50, 50, 50, 49)]


        [TestCase("Sulfuras, Hand of Ragnaros", 0, -1, 0, -1)]
        [TestCase("Sulfuras, Hand of Ragnaros", 1, -1, 1, -1)]
        [TestCase("Sulfuras, Hand of Ragnaros", 49, -1, 49, -1)]
        [TestCase("Sulfuras, Hand of Ragnaros", 50, -1, 50, -1)]
        [TestCase("Sulfuras, Hand of Ragnaros", 0, 0, 0, 0)]
        [TestCase("Sulfuras, Hand of Ragnaros", 1, 0, 1, 0)]
        [TestCase("Sulfuras, Hand of Ragnaros", 49, 0, 49, 0)]
        [TestCase("Sulfuras, Hand of Ragnaros", 50, 0, 50, 0)]
        [TestCase("Sulfuras, Hand of Ragnaros", 0, 5, 0, 5)]
        [TestCase("Sulfuras, Hand of Ragnaros", 1, 5, 1, 5)]
        [TestCase("Sulfuras, Hand of Ragnaros", 49, 5, 49, 5)]
        [TestCase("Sulfuras, Hand of Ragnaros", 50, 5, 50, 5)]
        [TestCase("Sulfuras, Hand of Ragnaros", 0, 6, 0, 6)]
        [TestCase("Sulfuras, Hand of Ragnaros", 1, 6, 1, 6)]
        [TestCase("Sulfuras, Hand of Ragnaros", 49, 6, 49, 6)]
        [TestCase("Sulfuras, Hand of Ragnaros", 50, 6, 50, 6)]
        [TestCase("Sulfuras, Hand of Ragnaros", 0, 10, 0, 10)]
        [TestCase("Sulfuras, Hand of Ragnaros", 1, 10, 1, 10)]
        [TestCase("Sulfuras, Hand of Ragnaros", 49, 10, 49, 10)]
        [TestCase("Sulfuras, Hand of Ragnaros", 50, 10, 50, 10)]
        [TestCase("Sulfuras, Hand of Ragnaros", 0, 11, 0, 11)]
        [TestCase("Sulfuras, Hand of Ragnaros", 1, 11, 1, 11)]
        [TestCase("Sulfuras, Hand of Ragnaros", 49, 11, 49, 11)]
        [TestCase("Sulfuras, Hand of Ragnaros", 50, 11, 50, 11)]
        [TestCase("Sulfuras, Hand of Ragnaros", 0, 49, 0, 49)]
        [TestCase("Sulfuras, Hand of Ragnaros", 1, 49, 1, 49)]
        [TestCase("Sulfuras, Hand of Ragnaros", 49, 49, 49, 49)]
        [TestCase("Sulfuras, Hand of Ragnaros", 50, 49, 50, 49)]
        [TestCase("Sulfuras, Hand of Ragnaros", 0, 50, 0, 50)]
        [TestCase("Sulfuras, Hand of Ragnaros", 1, 50, 1, 50)]
        [TestCase("Sulfuras, Hand of Ragnaros", 49, 50, 49, 50)]
        [TestCase("Sulfuras, Hand of Ragnaros", 50, 50, 50, 50)]

        [TestCase("Conjured", 0, -1, 0, -2)]
        [TestCase("Conjured", 1, -1, 0, -2)]
        [TestCase("Conjured", 49, -1, 45, -2)]
        [TestCase("Conjured", 50, -1, 46, -2)]
        [TestCase("Conjured", 0, 0, 0, -1)]
        [TestCase("Conjured", 1, 0, 0, -1)]
        [TestCase("Conjured", 49, 0, 45, -1)]
        [TestCase("Conjured", 50, 0, 46, -1)]
        [TestCase("Conjured", 0, 5, 0, 4)]
        [TestCase("Conjured", 1, 5, 0, 4)]
        [TestCase("Conjured", 49, 5, 47, 4)]
        [TestCase("Conjured", 50, 5, 48, 4)]
        [TestCase("Conjured", 0, 6, 0, 5)]
        [TestCase("Conjured", 1, 6, 0, 5)]
        [TestCase("Conjured", 49, 6, 47, 5)]
        [TestCase("Conjured", 50, 6, 48, 5)]
        [TestCase("Conjured", 0, 10, 0, 9)]
        [TestCase("Conjured", 1, 10, 0, 9)]
        [TestCase("Conjured", 49, 10, 47, 9)]
        [TestCase("Conjured", 50, 10, 48, 9)]
        [TestCase("Conjured", 0, 11, 0, 10)]
        [TestCase("Conjured", 1, 11, 0, 10)]
        [TestCase("Conjured", 49, 11, 47, 10)]
        [TestCase("Conjured", 50, 11, 48, 10)]
        [TestCase("Conjured", 0, 49, 0, 48)]
        [TestCase("Conjured", 1, 49, 0, 48)]
        [TestCase("Conjured", 49, 49, 47, 48)]
        [TestCase("Conjured", 50, 49, 48, 48)]
        [TestCase("Conjured", 0, 50, 0, 49)]
        [TestCase("Conjured", 1, 50, 0, 49)]
        [TestCase("Conjured", 49, 50, 47, 49)]
        [TestCase("Conjured", 50, 50, 48, 49)]



        [TestCase("Others", 0, -1, 0, -2)]
        [TestCase("Others", 1, -1, 0, -2)]
        [TestCase("Others", 49, -1, 47, -2)]
        [TestCase("Others", 50, -1, 48, -2)]
        [TestCase("Others", 0, 0, 0, -1)]
        [TestCase("Others", 1, 0, 0, -1)]
        [TestCase("Others", 49, 0, 47, -1)]
        [TestCase("Others", 50, 0, 48, -1)]
        [TestCase("Others", 0, 5, 0, 4)]
        [TestCase("Others", 1, 5, 0, 4)]
        [TestCase("Others", 49, 5, 48, 4)]
        [TestCase("Others", 50, 5, 49, 4)]
        [TestCase("Others", 0, 6, 0, 5)]
        [TestCase("Others", 1, 6, 0, 5)]
        [TestCase("Others", 49, 6, 48, 5)]
        [TestCase("Others", 50, 6, 49, 5)]
        [TestCase("Others", 0, 10, 0, 9)]
        [TestCase("Others", 1, 10, 0, 9)]
        [TestCase("Others", 49, 10, 48, 9)]
        [TestCase("Others", 50, 10, 49, 9)]
        [TestCase("Others", 0, 11, 0, 10)]
        [TestCase("Others", 1, 11, 0, 10)]
        [TestCase("Others", 49, 11, 48, 10)]
        [TestCase("Others", 50, 11, 49, 10)]
        [TestCase("Others", 0, 49, 0, 48)]
        [TestCase("Others", 1, 49, 0, 48)]
        [TestCase("Others", 49, 49, 48, 48)]
        [TestCase("Others", 50, 49, 49, 48)]
        [TestCase("Others", 0, 50, 0, 49)]
        [TestCase("Others", 1, 50, 0, 49)]
        [TestCase("Others", 49, 50, 48, 49)]
        [TestCase("Others", 50, 50, 49, 49)]
        // Quality 0 1 49 50
        // SellIn 10 11 5 6 -1 0 49 50 
        public void Test(string name, int quality, int sellin, int expectedQuality, int expectedSellin)
        {
            var items = new List<Item> { new Item { Name = name, Quality = quality, SellIn = sellin } };    
            GildedRose app = new GildedRose(items);
            app.UpdateQuality();
            Assert.AreEqual(expectedQuality, items[0].Quality);
            Assert.AreEqual(expectedSellin, items[0].SellIn);
        }
    }
}
